//
// Generated by protoc, do not edit by hand.
//
package org.apache.activemq.console.command.store.proto;


public class QueuePB implements org.fusesource.hawtbuf.proto.PBMessageFactory<QueuePB.Bean, QueuePB.Buffer> {

   public static final QueuePB FACTORY = new QueuePB();
   public static final org.fusesource.hawtbuf.proto.PBMessageFramedCodec<Buffer> FRAMED_CODEC = new org.fusesource.hawtbuf.proto.PBMessageFramedCodec<Buffer>(FACTORY);
   public static final org.fusesource.hawtbuf.proto.PBMessageUnframedCodec<Buffer> UNFRAMED_CODEC = new org.fusesource.hawtbuf.proto.PBMessageUnframedCodec<Buffer>(FACTORY);

   public Bean create()  {
      return new Bean();
   }

   public Bean parseUnframed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
      return new Bean().mergeUnframed(data);
   }

   public Bean parseUnframed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
      return parseUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(data));
   }

   public Buffer parseUnframed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
      return new Buffer(data);
   }

   public Buffer parseUnframed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
      return parseUnframed(new org.fusesource.hawtbuf.Buffer(data));
   }

   public Buffer parseFramed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
      int length = data.readRawVarint32();
      int oldLimit = data.pushLimit(length);
      Buffer rc = parseUnframed(data.readRawBytes(length));
      data.popLimit(oldLimit);
      return rc;
   }

   public Buffer parseFramed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
      try {
         org.fusesource.hawtbuf.proto.CodedInputStream input = new org.fusesource.hawtbuf.proto.CodedInputStream(data);
         Buffer rc = parseFramed(input);
         input.checkLastTagWas(0);
         return rc;
      } catch (org.fusesource.hawtbuf.proto.InvalidProtocolBufferException e) {
         throw e;
      } catch (java.io.IOException e) {
         throw new RuntimeException("An IOException was thrown (should never happen in this method).", e);
      }
   }

   public Buffer parseFramed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
      return parseFramed(new org.fusesource.hawtbuf.Buffer(data));
   }

   public Buffer parseFramed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
      return parseUnframed(org.fusesource.hawtbuf.proto.MessageBufferSupport.readFrame(data));
   }

   public interface Getter extends org.fusesource.hawtbuf.proto.PBMessage<QueuePB.Bean, QueuePB.Buffer> {

      // required int64 key = 1;
      public boolean hasKey();
      public long getKey();
      // optional bytes binding_kind = 2;
      public boolean hasBindingKind();
      public org.fusesource.hawtbuf.AsciiBuffer getBindingKind();
      // optional bytes binding_data = 3;
      public boolean hasBindingData();
      public org.fusesource.hawtbuf.Buffer getBindingData();
      public Bean copy();
      public Buffer freeze();
      public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix);
   }

   static public final class Bean implements Getter {

      Buffer frozen;
      Bean bean;

      public Bean() {
         this.bean = this;
      }

      public Bean(Bean copy) {
         this.bean = copy;
      }

      public Bean copy() {
         return new Bean(bean);
      }

      public boolean frozen() {
         return frozen!=null;
      }

      public Buffer freeze() {
         if( frozen==null ) {
            frozen = new Buffer(bean);
            assert deepFreeze();
         }
         return frozen;
      }

      private boolean deepFreeze() {
         frozen.serializedSizeUnframed();
         return true;
      }

      private void copyCheck() {
         assert frozen==null : org.fusesource.hawtbuf.proto.MessageBufferSupport.FORZEN_ERROR_MESSAGE;
         if (bean != this) {
            copy(bean);
         }
      }

      private void copy(Bean other) {
         this.bean = this;
         this.f_key = other.f_key;
         this.b_key = other.b_key;
         this.f_bindingKind = other.f_bindingKind;
         this.f_bindingData = other.f_bindingData;
      }

      // required int64 key = 1;
      private long f_key = 0;
      private boolean b_key;

      public boolean hasKey() {
         return bean.b_key;
      }

      public long getKey() {
         return bean.f_key;
      }

      public Bean setKey(long key) {
         copyCheck();
         this.b_key = true;
         this.f_key = key;
         return this;
      }

      public void clearKey() {
         copyCheck();
         this.b_key = false;
         this.f_key = 0;
      }

      // optional bytes binding_kind = 2;
      private org.fusesource.hawtbuf.AsciiBuffer f_bindingKind = null;

      public boolean hasBindingKind() {
         return bean.f_bindingKind!=null;
      }

      public org.fusesource.hawtbuf.AsciiBuffer getBindingKind() {
         return bean.f_bindingKind;
      }

      public Bean setBindingKind(org.fusesource.hawtbuf.AsciiBuffer bindingKind) {
         copyCheck();
         this.f_bindingKind = bindingKind;
         return this;
      }

      public void clearBindingKind() {
         copyCheck();
         this.f_bindingKind = null;
      }

      // optional bytes binding_data = 3;
      private org.fusesource.hawtbuf.Buffer f_bindingData = null;

      public boolean hasBindingData() {
         return bean.f_bindingData!=null;
      }

      public org.fusesource.hawtbuf.Buffer getBindingData() {
         return bean.f_bindingData;
      }

      public Bean setBindingData(org.fusesource.hawtbuf.Buffer bindingData) {
         copyCheck();
         this.f_bindingData = bindingData;
         return this;
      }

      public void clearBindingData() {
         copyCheck();
         this.f_bindingData = null;
      }

      public String toString() {
         return toString(new java.lang.StringBuilder(), "").toString();
      }

      public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
         if(  hasKey() ) {
            sb.append(prefix+"key: ");
            sb.append(getKey());
            sb.append("\n");
         }
         if(  hasBindingKind() ) {
            sb.append(prefix+"binding_kind: ");
            sb.append(getBindingKind());
            sb.append("\n");
         }
         if(  hasBindingData() ) {
            sb.append(prefix+"binding_data: ");
            sb.append(getBindingData());
            sb.append("\n");
         }
         return sb;
      }

      public Bean mergeUnframed(java.io.InputStream input) throws java.io.IOException {
         return mergeUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(input));
      }

      public Bean mergeUnframed(org.fusesource.hawtbuf.proto.CodedInputStream input) throws java.io.IOException {
         copyCheck();
         while (true) {
            int tag = input.readTag();
            if ((tag & 0x07) == 4) {
               return this;
            }
            switch (tag) {
            case 0:
               return this;
            default: {
               break;
            }
            case 8:
               setKey(input.readInt64());
               break;
            case 18:
               setBindingKind(new org.fusesource.hawtbuf.AsciiBuffer(input.readBytes()));
               break;
            case 26:
               setBindingData(input.readBytes());
               break;
            }
         }
      }
      public boolean equals(Object obj) {
         if( obj==this )
            return true;
         
         if( obj==null || obj.getClass()!=Bean.class )
            return false;
         
         return equals((Bean)obj);
      }
      
      public boolean equals(Bean obj) {
         if (hasKey() ^ obj.hasKey() ) 
            return false;
         if (hasKey() && ( getKey()!=obj.getKey() ))
            return false;
         if (hasBindingKind() ^ obj.hasBindingKind() ) 
            return false;
         if (hasBindingKind() && ( !getBindingKind().equals(obj.getBindingKind()) ))
            return false;
         if (hasBindingData() ^ obj.hasBindingData() ) 
            return false;
         if (hasBindingData() && ( !getBindingData().equals(obj.getBindingData()) ))
            return false;
         return true;
      }
      
      public int hashCode() {
         int rc=2066384;
         if (hasKey()) {
            rc ^= ( 75327^(new Long(getKey())).hashCode() );
         }
         if (hasBindingKind()) {
            rc ^= ( 1382366105^getBindingKind().hashCode() );
         }
         if (hasBindingData()) {
            rc ^= ( 1382150063^getBindingData().hashCode() );
         }
         return rc;
      }
      
      public Bean mergeFrom(Getter other) {
         copyCheck();
         if (other.hasKey()) {
            setKey(other.getKey());
         }
         if (other.hasBindingKind()) {
            setBindingKind(other.getBindingKind());
         }
         if (other.hasBindingData()) {
            setBindingData(other.getBindingData());
         }
         return this;
      }

      public void clear() {
         clearKey();
         clearBindingKind();
         clearBindingData();
      }

      public void readExternal(java.io.DataInput in) throws java.io.IOException {
         assert frozen==null : org.fusesource.hawtbuf.proto.MessageBufferSupport.FORZEN_ERROR_MESSAGE;
         bean = this;
         frozen = null;
         f_key = in.readLong();
         b_key = true;
         {
            int size = in.readInt();
            if( size>=0 ) {
               byte b[] = new byte[size];
               in.readFully(b);
               f_bindingKind = new org.fusesource.hawtbuf.AsciiBuffer(b);
            } else {
               f_bindingKind = null;
            }
         }
         {
            int size = in.readInt();
            if( size>=0 ) {
               byte b[] = new byte[size];
               in.readFully(b);
               f_bindingData = new org.fusesource.hawtbuf.Buffer(b);
            } else {
               f_bindingData = null;
            }
         }
      }

      public void writeExternal(java.io.DataOutput out) throws java.io.IOException {
         out.writeLong(bean.f_key);
         if( bean.f_bindingKind!=null ) {
            out.writeInt(bean.f_bindingKind.getLength());
            out.write(bean.f_bindingKind.getData(), bean.f_bindingKind.getOffset(), bean.f_bindingKind.getLength());
         } else {
            out.writeInt(-1);
         }
         if( bean.f_bindingData!=null ) {
            out.writeInt(bean.f_bindingData.getLength());
            out.write(bean.f_bindingData.getData(), bean.f_bindingData.getOffset(), bean.f_bindingData.getLength());
         } else {
            out.writeInt(-1);
         }
      }

   }

   static public final class Buffer implements org.fusesource.hawtbuf.proto.MessageBuffer<QueuePB.Bean, QueuePB.Buffer>, Getter {

      private Bean bean;
      private org.fusesource.hawtbuf.Buffer buffer;
      private int size=-1;
      private int hashCode;

      private Buffer(org.fusesource.hawtbuf.Buffer buffer) {
         this.buffer = buffer;
      }

      private Buffer(Bean bean) {
         this.bean = bean;
      }

      public Bean copy() {
         return bean().copy();
      }

      public Buffer freeze() {
         return this;
      }

      private Bean bean() {
         if (bean == null) {
            try {
               bean = new Bean().mergeUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(buffer));
               bean.frozen=this;
            } catch (org.fusesource.hawtbuf.proto.InvalidProtocolBufferException e) {
               throw new RuntimeException(e);
            } catch (java.io.IOException e) {
               throw new RuntimeException("An IOException was thrown (should never happen in this method).", e);
            }
         }
         return bean;
      }

      public String toString() {
         return bean().toString();
      }

      public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
         return bean().toString(sb, prefix);
      }

      // required int64 key = 1;
      public boolean hasKey() {
         return bean().hasKey();
      }

      public long getKey() {
         return bean().getKey();
      }

      // optional bytes binding_kind = 2;
      public boolean hasBindingKind() {
         return bean().hasBindingKind();
      }

      public org.fusesource.hawtbuf.AsciiBuffer getBindingKind() {
         return bean().getBindingKind();
      }

      // optional bytes binding_data = 3;
      public boolean hasBindingData() {
         return bean().hasBindingData();
      }

      public org.fusesource.hawtbuf.Buffer getBindingData() {
         return bean().getBindingData();
      }

      public org.fusesource.hawtbuf.Buffer toUnframedBuffer() {
         if( buffer !=null ) {
            return buffer;
         }
         return org.fusesource.hawtbuf.proto.MessageBufferSupport.toUnframedBuffer(this);
      }

      public org.fusesource.hawtbuf.Buffer toFramedBuffer() {
         return org.fusesource.hawtbuf.proto.MessageBufferSupport.toFramedBuffer(this);
      }

      public byte[] toUnframedByteArray() {
         return toUnframedBuffer().toByteArray();
      }

      public byte[] toFramedByteArray() {
         return toFramedBuffer().toByteArray();
      }

      public void writeFramed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
         output.writeRawVarint32(serializedSizeUnframed());
         writeUnframed(output);
      }

      public void writeFramed(java.io.OutputStream output) throws java.io.IOException {
         org.fusesource.hawtbuf.proto.CodedOutputStream codedOutput = new org.fusesource.hawtbuf.proto.CodedOutputStream(output);
         writeFramed(codedOutput);
         codedOutput.flush();
      }

      public void writeUnframed(java.io.OutputStream output) throws java.io.IOException {
         org.fusesource.hawtbuf.proto.CodedOutputStream codedOutput = new org.fusesource.hawtbuf.proto.CodedOutputStream(output);
         writeUnframed(codedOutput);
         codedOutput.flush();
      }

      public void writeUnframed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
         if (buffer == null) {
            int size = serializedSizeUnframed();
            buffer = output.getNextBuffer(size);
            org.fusesource.hawtbuf.proto.CodedOutputStream original=null;
            if( buffer == null ) {
               buffer = new org.fusesource.hawtbuf.Buffer(new byte[size]);
               original = output;
               output = new org.fusesource.hawtbuf.proto.CodedOutputStream(buffer);
            }
            output.writeInt64(1, bean.getKey());
            if (bean.hasBindingKind()) {
               output.writeBytes(2, bean.getBindingKind());
            }
            if (bean.hasBindingData()) {
               output.writeBytes(3, bean.getBindingData());
            }
            if( original !=null ) {
               output.checkNoSpaceLeft();
               output = original;
               output.writeRawBytes(buffer);
            }
         } else {
            output.writeRawBytes(buffer);
         }
      }

      public int serializedSizeFramed() {
         int t = serializedSizeUnframed();
         return org.fusesource.hawtbuf.proto.CodedOutputStream.computeRawVarint32Size(t) + t;
      }

      public int serializedSizeUnframed() {
         if (buffer != null) {
            return buffer.length;
         }
         if (size != -1)
            return size;

         size = 0;
         size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt64Size(1, getKey());
         if (hasBindingKind()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeBytesSize(2, getBindingKind());
         }
         if (hasBindingData()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeBytesSize(3, getBindingData());
         }
         return size;
      }

      public boolean equals(Object obj) {
         if( obj==this )
            return true;
         
         if( obj==null || obj.getClass()!=Buffer.class )
            return false;
         
         return equals((Buffer)obj);
      }
      
      public boolean equals(Buffer obj) {
         return toUnframedBuffer().equals(obj.toUnframedBuffer());
      }
      
      public int hashCode() {
         if( hashCode==0 ) {
         hashCode=2000715872 ^ toUnframedBuffer().hashCode();
         }
         return hashCode;
      }
      
      public boolean frozen() {
         return true;
      }
   }

}

