//
// Generated by protoc, do not edit by hand.
//
package org.apache.activemq.console.command.store.proto;


public class QueueEntryPB implements org.fusesource.hawtbuf.proto.PBMessageFactory<QueueEntryPB.Bean, QueueEntryPB.Buffer> {

   public static final QueueEntryPB FACTORY = new QueueEntryPB();
   public static final org.fusesource.hawtbuf.proto.PBMessageFramedCodec<Buffer> FRAMED_CODEC = new org.fusesource.hawtbuf.proto.PBMessageFramedCodec<Buffer>(FACTORY);
   public static final org.fusesource.hawtbuf.proto.PBMessageUnframedCodec<Buffer> UNFRAMED_CODEC = new org.fusesource.hawtbuf.proto.PBMessageUnframedCodec<Buffer>(FACTORY);

   public Bean create()  {
      return new Bean();
   }

   public Bean parseUnframed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
      return new Bean().mergeUnframed(data);
   }

   public Bean parseUnframed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
      return parseUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(data));
   }

   public Buffer parseUnframed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
      return new Buffer(data);
   }

   public Buffer parseUnframed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
      return parseUnframed(new org.fusesource.hawtbuf.Buffer(data));
   }

   public Buffer parseFramed(org.fusesource.hawtbuf.proto.CodedInputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
      int length = data.readRawVarint32();
      int oldLimit = data.pushLimit(length);
      Buffer rc = parseUnframed(data.readRawBytes(length));
      data.popLimit(oldLimit);
      return rc;
   }

   public Buffer parseFramed(org.fusesource.hawtbuf.Buffer data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
      try {
         org.fusesource.hawtbuf.proto.CodedInputStream input = new org.fusesource.hawtbuf.proto.CodedInputStream(data);
         Buffer rc = parseFramed(input);
         input.checkLastTagWas(0);
         return rc;
      } catch (org.fusesource.hawtbuf.proto.InvalidProtocolBufferException e) {
         throw e;
      } catch (java.io.IOException e) {
         throw new RuntimeException("An IOException was thrown (should never happen in this method).", e);
      }
   }

   public Buffer parseFramed(byte[] data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException {
      return parseFramed(new org.fusesource.hawtbuf.Buffer(data));
   }

   public Buffer parseFramed(java.io.InputStream data) throws org.fusesource.hawtbuf.proto.InvalidProtocolBufferException, java.io.IOException {
      return parseUnframed(org.fusesource.hawtbuf.proto.MessageBufferSupport.readFrame(data));
   }

   public interface Getter extends org.fusesource.hawtbuf.proto.PBMessage<QueueEntryPB.Bean, QueueEntryPB.Buffer> {

      // required int64 queueKey = 1;
      public boolean hasQueueKey();
      public long getQueueKey();
      // required int64 queueSeq = 2;
      public boolean hasQueueSeq();
      public long getQueueSeq();
      // required int64 messageKey = 3;
      public boolean hasMessageKey();
      public long getMessageKey();
      // optional int32 size = 4;
      public boolean hasSize();
      public int getSize();
      // optional bytes attachment = 5;
      public boolean hasAttachment();
      public org.fusesource.hawtbuf.Buffer getAttachment();
      // optional int32 redeliveries = 6;
      public boolean hasRedeliveries();
      public int getRedeliveries();
      // optional sint64 expiration = 7;
      public boolean hasExpiration();
      public long getExpiration();
      // optional bytes messageLocator = 8;
      public boolean hasMessageLocator();
      public org.fusesource.hawtbuf.Buffer getMessageLocator();
      // repeated bytes sender = 9;
      public boolean hasSender();
      public java.util.List<org.fusesource.hawtbuf.Buffer> getSenderList();
      public int getSenderCount();
      public org.fusesource.hawtbuf.Buffer getSender(int index);
      public Bean copy();
      public Buffer freeze();
      public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix);
   }

   static public final class Bean implements Getter {

      Buffer frozen;
      Bean bean;

      public Bean() {
         this.bean = this;
      }

      public Bean(Bean copy) {
         this.bean = copy;
      }

      public Bean copy() {
         return new Bean(bean);
      }

      public boolean frozen() {
         return frozen!=null;
      }

      public Buffer freeze() {
         if( frozen==null ) {
            frozen = new Buffer(bean);
            assert deepFreeze();
         }
         return frozen;
      }

      private boolean deepFreeze() {
         frozen.serializedSizeUnframed();
         return true;
      }

      private void copyCheck() {
         assert frozen==null : org.fusesource.hawtbuf.proto.MessageBufferSupport.FORZEN_ERROR_MESSAGE;
         if (bean != this) {
            copy(bean);
         }
      }

      private void copy(Bean other) {
         this.bean = this;
         this.f_queueKey = other.f_queueKey;
         this.b_queueKey = other.b_queueKey;
         this.f_queueSeq = other.f_queueSeq;
         this.b_queueSeq = other.b_queueSeq;
         this.f_messageKey = other.f_messageKey;
         this.b_messageKey = other.b_messageKey;
         this.f_size = other.f_size;
         this.b_size = other.b_size;
         this.f_attachment = other.f_attachment;
         this.f_redeliveries = other.f_redeliveries;
         this.b_redeliveries = other.b_redeliveries;
         this.f_expiration = other.f_expiration;
         this.b_expiration = other.b_expiration;
         this.f_messageLocator = other.f_messageLocator;
         this.f_sender = other.f_sender;
         if( this.f_sender !=null && !other.frozen()) {
            this.f_sender = new java.util.ArrayList<org.fusesource.hawtbuf.Buffer>(this.f_sender);
         }
      }

      // required int64 queueKey = 1;
      private long f_queueKey = 0;
      private boolean b_queueKey;

      public boolean hasQueueKey() {
         return bean.b_queueKey;
      }

      public long getQueueKey() {
         return bean.f_queueKey;
      }

      public Bean setQueueKey(long queueKey) {
         copyCheck();
         this.b_queueKey = true;
         this.f_queueKey = queueKey;
         return this;
      }

      public void clearQueueKey() {
         copyCheck();
         this.b_queueKey = false;
         this.f_queueKey = 0;
      }

      // required int64 queueSeq = 2;
      private long f_queueSeq = 0;
      private boolean b_queueSeq;

      public boolean hasQueueSeq() {
         return bean.b_queueSeq;
      }

      public long getQueueSeq() {
         return bean.f_queueSeq;
      }

      public Bean setQueueSeq(long queueSeq) {
         copyCheck();
         this.b_queueSeq = true;
         this.f_queueSeq = queueSeq;
         return this;
      }

      public void clearQueueSeq() {
         copyCheck();
         this.b_queueSeq = false;
         this.f_queueSeq = 0;
      }

      // required int64 messageKey = 3;
      private long f_messageKey = 0;
      private boolean b_messageKey;

      public boolean hasMessageKey() {
         return bean.b_messageKey;
      }

      public long getMessageKey() {
         return bean.f_messageKey;
      }

      public Bean setMessageKey(long messageKey) {
         copyCheck();
         this.b_messageKey = true;
         this.f_messageKey = messageKey;
         return this;
      }

      public void clearMessageKey() {
         copyCheck();
         this.b_messageKey = false;
         this.f_messageKey = 0;
      }

      // optional int32 size = 4;
      private int f_size = 0;
      private boolean b_size;

      public boolean hasSize() {
         return bean.b_size;
      }

      public int getSize() {
         return bean.f_size;
      }

      public Bean setSize(int size) {
         copyCheck();
         this.b_size = true;
         this.f_size = size;
         return this;
      }

      public void clearSize() {
         copyCheck();
         this.b_size = false;
         this.f_size = 0;
      }

      // optional bytes attachment = 5;
      private org.fusesource.hawtbuf.Buffer f_attachment = null;

      public boolean hasAttachment() {
         return bean.f_attachment!=null;
      }

      public org.fusesource.hawtbuf.Buffer getAttachment() {
         return bean.f_attachment;
      }

      public Bean setAttachment(org.fusesource.hawtbuf.Buffer attachment) {
         copyCheck();
         this.f_attachment = attachment;
         return this;
      }

      public void clearAttachment() {
         copyCheck();
         this.f_attachment = null;
      }

      // optional int32 redeliveries = 6;
      private int f_redeliveries = 0;
      private boolean b_redeliveries;

      public boolean hasRedeliveries() {
         return bean.b_redeliveries;
      }

      public int getRedeliveries() {
         return bean.f_redeliveries;
      }

      public Bean setRedeliveries(int redeliveries) {
         copyCheck();
         this.b_redeliveries = true;
         this.f_redeliveries = redeliveries;
         return this;
      }

      public void clearRedeliveries() {
         copyCheck();
         this.b_redeliveries = false;
         this.f_redeliveries = 0;
      }

      // optional sint64 expiration = 7;
      private long f_expiration = 0;
      private boolean b_expiration;

      public boolean hasExpiration() {
         return bean.b_expiration;
      }

      public long getExpiration() {
         return bean.f_expiration;
      }

      public Bean setExpiration(long expiration) {
         copyCheck();
         this.b_expiration = true;
         this.f_expiration = expiration;
         return this;
      }

      public void clearExpiration() {
         copyCheck();
         this.b_expiration = false;
         this.f_expiration = 0;
      }

      // optional bytes messageLocator = 8;
      private org.fusesource.hawtbuf.Buffer f_messageLocator = null;

      public boolean hasMessageLocator() {
         return bean.f_messageLocator!=null;
      }

      public org.fusesource.hawtbuf.Buffer getMessageLocator() {
         return bean.f_messageLocator;
      }

      public Bean setMessageLocator(org.fusesource.hawtbuf.Buffer messageLocator) {
         copyCheck();
         this.f_messageLocator = messageLocator;
         return this;
      }

      public void clearMessageLocator() {
         copyCheck();
         this.f_messageLocator = null;
      }

      // repeated bytes sender = 9;
      private java.util.List<org.fusesource.hawtbuf.Buffer> f_sender;

      public boolean hasSender() {
         return bean.f_sender!=null && !bean.f_sender.isEmpty();
      }

      public java.util.List<org.fusesource.hawtbuf.Buffer> getSenderList() {
         return bean.f_sender;
      }

      public java.util.List<org.fusesource.hawtbuf.Buffer> createSenderList() {
         copyCheck();
         if( this.f_sender == null ) {
            this.f_sender = new java.util.ArrayList<org.fusesource.hawtbuf.Buffer>();
         }
         return bean.f_sender;
      }

      public Bean setSenderList(java.util.List<org.fusesource.hawtbuf.Buffer> sender) {
         copyCheck();
         this.f_sender = sender;
         return this;
      }

      public int getSenderCount() {
         if( bean.f_sender == null ) {
            return 0;
         }
         return bean.f_sender.size();
      }

      public org.fusesource.hawtbuf.Buffer getSender(int index) {
         if( bean.f_sender == null ) {
            return null;
         }
         return bean.f_sender.get(index);
      }

      public Bean setSender(int index, org.fusesource.hawtbuf.Buffer value) {
         this.createSenderList().set(index, value);
         return this;
      }

      public Bean addSender(org.fusesource.hawtbuf.Buffer value) {
         this.createSenderList().add(value);
         return this;
      }

      public Bean addAllSender(java.lang.Iterable<? extends org.fusesource.hawtbuf.Buffer> collection) {
         org.fusesource.hawtbuf.proto.MessageBufferSupport.addAll(collection, this.createSenderList());
         return this;
      }

      public void clearSender() {
         copyCheck();
         this.f_sender = null;
      }

      public String toString() {
         return toString(new java.lang.StringBuilder(), "").toString();
      }

      public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
         if(  hasQueueKey() ) {
            sb.append(prefix+"queueKey: ");
            sb.append(getQueueKey());
            sb.append("\n");
         }
         if(  hasQueueSeq() ) {
            sb.append(prefix+"queueSeq: ");
            sb.append(getQueueSeq());
            sb.append("\n");
         }
         if(  hasMessageKey() ) {
            sb.append(prefix+"messageKey: ");
            sb.append(getMessageKey());
            sb.append("\n");
         }
         if(  hasSize() ) {
            sb.append(prefix+"size: ");
            sb.append(getSize());
            sb.append("\n");
         }
         if(  hasAttachment() ) {
            sb.append(prefix+"attachment: ");
            sb.append(getAttachment());
            sb.append("\n");
         }
         if(  hasRedeliveries() ) {
            sb.append(prefix+"redeliveries: ");
            sb.append(getRedeliveries());
            sb.append("\n");
         }
         if(  hasExpiration() ) {
            sb.append(prefix+"expiration: ");
            sb.append(getExpiration());
            sb.append("\n");
         }
         if(  hasMessageLocator() ) {
            sb.append(prefix+"messageLocator: ");
            sb.append(getMessageLocator());
            sb.append("\n");
         }
         if(  hasSender() ) {
            java.util.List<org.fusesource.hawtbuf.Buffer> l = getSenderList();
            for( int i=0; i < l.size(); i++ ) {
               sb.append(prefix+"sender["+i+"]: ");
               sb.append(l.get(i));
               sb.append("\n");
            }
         }
         return sb;
      }

      public Bean mergeUnframed(java.io.InputStream input) throws java.io.IOException {
         return mergeUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(input));
      }

      public Bean mergeUnframed(org.fusesource.hawtbuf.proto.CodedInputStream input) throws java.io.IOException {
         copyCheck();
         while (true) {
            int tag = input.readTag();
            if ((tag & 0x07) == 4) {
               return this;
            }
            switch (tag) {
            case 0:
               return this;
            default: {
               break;
            }
            case 8:
               setQueueKey(input.readInt64());
               break;
            case 16:
               setQueueSeq(input.readInt64());
               break;
            case 24:
               setMessageKey(input.readInt64());
               break;
            case 32:
               setSize(input.readInt32());
               break;
            case 42:
               setAttachment(input.readBytes());
               break;
            case 48:
               setRedeliveries(input.readInt32());
               break;
            case 56:
               setExpiration(input.readSInt64());
               break;
            case 66:
               setMessageLocator(input.readBytes());
               break;
            case 74:
               createSenderList().add(input.readBytes());
               break;
            }
         }
      }
      public boolean equals(Object obj) {
         if( obj==this )
            return true;
         
         if( obj==null || obj.getClass()!=Bean.class )
            return false;
         
         return equals((Bean)obj);
      }
      
      public boolean equals(Bean obj) {
         if (hasQueueKey() ^ obj.hasQueueKey() ) 
            return false;
         if (hasQueueKey() && ( getQueueKey()!=obj.getQueueKey() ))
            return false;
         if (hasQueueSeq() ^ obj.hasQueueSeq() ) 
            return false;
         if (hasQueueSeq() && ( getQueueSeq()!=obj.getQueueSeq() ))
            return false;
         if (hasMessageKey() ^ obj.hasMessageKey() ) 
            return false;
         if (hasMessageKey() && ( getMessageKey()!=obj.getMessageKey() ))
            return false;
         if (hasSize() ^ obj.hasSize() ) 
            return false;
         if (hasSize() && ( getSize()!=obj.getSize() ))
            return false;
         if (hasAttachment() ^ obj.hasAttachment() ) 
            return false;
         if (hasAttachment() && ( !getAttachment().equals(obj.getAttachment()) ))
            return false;
         if (hasRedeliveries() ^ obj.hasRedeliveries() ) 
            return false;
         if (hasRedeliveries() && ( getRedeliveries()!=obj.getRedeliveries() ))
            return false;
         if (hasExpiration() ^ obj.hasExpiration() ) 
            return false;
         if (hasExpiration() && ( getExpiration()!=obj.getExpiration() ))
            return false;
         if (hasMessageLocator() ^ obj.hasMessageLocator() ) 
            return false;
         if (hasMessageLocator() && ( !getMessageLocator().equals(obj.getMessageLocator()) ))
            return false;
         if (hasSender() ^ obj.hasSender() ) 
            return false;
         if (hasSender() && ( !getSenderList().equals(obj.getSenderList()) ))
            return false;
         return true;
      }
      
      public int hashCode() {
         int rc=2066384;
         if (hasQueueKey()) {
            rc ^= ( -1099854930^(new Long(getQueueKey())).hashCode() );
         }
         if (hasQueueSeq()) {
            rc ^= ( -1099847250^(new Long(getQueueSeq())).hashCode() );
         }
         if (hasMessageKey()) {
            rc ^= ( 302723320^(new Long(getMessageKey())).hashCode() );
         }
         if (hasSize()) {
            rc ^= ( 2577441^getSize() );
         }
         if (hasAttachment()) {
            rc ^= ( 29963587^getAttachment().hashCode() );
         }
         if (hasRedeliveries()) {
            rc ^= ( 1969176101^getRedeliveries() );
         }
         if (hasExpiration()) {
            rc ^= ( 1155999439^(new Long(getExpiration())).hashCode() );
         }
         if (hasMessageLocator()) {
            rc ^= ( 193493679^getMessageLocator().hashCode() );
         }
         if (hasSender()) {
            rc ^= ( -1822095787^getSenderList().hashCode() );
         }
         return rc;
      }
      
      public Bean mergeFrom(Getter other) {
         copyCheck();
         if (other.hasQueueKey()) {
            setQueueKey(other.getQueueKey());
         }
         if (other.hasQueueSeq()) {
            setQueueSeq(other.getQueueSeq());
         }
         if (other.hasMessageKey()) {
            setMessageKey(other.getMessageKey());
         }
         if (other.hasSize()) {
            setSize(other.getSize());
         }
         if (other.hasAttachment()) {
            setAttachment(other.getAttachment());
         }
         if (other.hasRedeliveries()) {
            setRedeliveries(other.getRedeliveries());
         }
         if (other.hasExpiration()) {
            setExpiration(other.getExpiration());
         }
         if (other.hasMessageLocator()) {
            setMessageLocator(other.getMessageLocator());
         }
         if (other.hasSender()) {
            getSenderList().addAll(other.getSenderList());
         }
         return this;
      }

      public void clear() {
         clearQueueKey();
         clearQueueSeq();
         clearMessageKey();
         clearSize();
         clearAttachment();
         clearRedeliveries();
         clearExpiration();
         clearMessageLocator();
         clearSender();
      }

      public void readExternal(java.io.DataInput in) throws java.io.IOException {
         assert frozen==null : org.fusesource.hawtbuf.proto.MessageBufferSupport.FORZEN_ERROR_MESSAGE;
         bean = this;
         frozen = null;
         f_queueKey = in.readLong();
         b_queueKey = true;
         f_queueSeq = in.readLong();
         b_queueSeq = true;
         f_messageKey = in.readLong();
         b_messageKey = true;
         f_size = in.readInt();
         b_size = true;
         {
            int size = in.readInt();
            if( size>=0 ) {
               byte b[] = new byte[size];
               in.readFully(b);
               f_attachment = new org.fusesource.hawtbuf.Buffer(b);
            } else {
               f_attachment = null;
            }
         }
         f_redeliveries = in.readInt();
         b_redeliveries = true;
         f_expiration = in.readLong();
         b_expiration = true;
         {
            int size = in.readInt();
            if( size>=0 ) {
               byte b[] = new byte[size];
               in.readFully(b);
               f_messageLocator = new org.fusesource.hawtbuf.Buffer(b);
            } else {
               f_messageLocator = null;
            }
         }
         {
            int size = in.readShort();
            if( size>=0 ) {
               f_sender = new java.util.ArrayList<org.fusesource.hawtbuf.Buffer>(size);
               for(int i=0; i<size; i++) {
                  byte b[] = new byte[in.readInt()];
                  in.readFully(b);
                  f_sender.add(new org.fusesource.hawtbuf.Buffer(b));
               }
            } else {
               f_sender = null;
            }
         }
      }

      public void writeExternal(java.io.DataOutput out) throws java.io.IOException {
         out.writeLong(bean.f_queueKey);
         out.writeLong(bean.f_queueSeq);
         out.writeLong(bean.f_messageKey);
         out.writeInt(bean.f_size);
         if( bean.f_attachment!=null ) {
            out.writeInt(bean.f_attachment.getLength());
            out.write(bean.f_attachment.getData(), bean.f_attachment.getOffset(), bean.f_attachment.getLength());
         } else {
            out.writeInt(-1);
         }
         out.writeInt(bean.f_redeliveries);
         out.writeLong(bean.f_expiration);
         if( bean.f_messageLocator!=null ) {
            out.writeInt(bean.f_messageLocator.getLength());
            out.write(bean.f_messageLocator.getData(), bean.f_messageLocator.getOffset(), bean.f_messageLocator.getLength());
         } else {
            out.writeInt(-1);
         }
         if( bean.f_sender!=null ) {
            out.writeShort(bean.f_sender.size());
            for(org.fusesource.hawtbuf.Buffer o : bean.f_sender) {
               out.writeInt(o.getLength());
               out.write(o.getData(), o.getOffset(), o.getLength());
            }
         } else {
            out.writeShort(-1);
         }
      }

   }

   static public final class Buffer implements org.fusesource.hawtbuf.proto.MessageBuffer<QueueEntryPB.Bean, QueueEntryPB.Buffer>, Getter {

      private Bean bean;
      private org.fusesource.hawtbuf.Buffer buffer;
      private int size=-1;
      private int hashCode;

      private Buffer(org.fusesource.hawtbuf.Buffer buffer) {
         this.buffer = buffer;
      }

      private Buffer(Bean bean) {
         this.bean = bean;
      }

      public Bean copy() {
         return bean().copy();
      }

      public Buffer freeze() {
         return this;
      }

      private Bean bean() {
         if (bean == null) {
            try {
               bean = new Bean().mergeUnframed(new org.fusesource.hawtbuf.proto.CodedInputStream(buffer));
               bean.frozen=this;
            } catch (org.fusesource.hawtbuf.proto.InvalidProtocolBufferException e) {
               throw new RuntimeException(e);
            } catch (java.io.IOException e) {
               throw new RuntimeException("An IOException was thrown (should never happen in this method).", e);
            }
         }
         return bean;
      }

      public String toString() {
         return bean().toString();
      }

      public java.lang.StringBuilder toString(java.lang.StringBuilder sb, String prefix) {
         return bean().toString(sb, prefix);
      }

      // required int64 queueKey = 1;
      public boolean hasQueueKey() {
         return bean().hasQueueKey();
      }

      public long getQueueKey() {
         return bean().getQueueKey();
      }

      // required int64 queueSeq = 2;
      public boolean hasQueueSeq() {
         return bean().hasQueueSeq();
      }

      public long getQueueSeq() {
         return bean().getQueueSeq();
      }

      // required int64 messageKey = 3;
      public boolean hasMessageKey() {
         return bean().hasMessageKey();
      }

      public long getMessageKey() {
         return bean().getMessageKey();
      }

      // optional int32 size = 4;
      public boolean hasSize() {
         return bean().hasSize();
      }

      public int getSize() {
         return bean().getSize();
      }

      // optional bytes attachment = 5;
      public boolean hasAttachment() {
         return bean().hasAttachment();
      }

      public org.fusesource.hawtbuf.Buffer getAttachment() {
         return bean().getAttachment();
      }

      // optional int32 redeliveries = 6;
      public boolean hasRedeliveries() {
         return bean().hasRedeliveries();
      }

      public int getRedeliveries() {
         return bean().getRedeliveries();
      }

      // optional sint64 expiration = 7;
      public boolean hasExpiration() {
         return bean().hasExpiration();
      }

      public long getExpiration() {
         return bean().getExpiration();
      }

      // optional bytes messageLocator = 8;
      public boolean hasMessageLocator() {
         return bean().hasMessageLocator();
      }

      public org.fusesource.hawtbuf.Buffer getMessageLocator() {
         return bean().getMessageLocator();
      }

      // repeated bytes sender = 9;
      public boolean hasSender() {
         return bean().hasSender();
      }

      public java.util.List<org.fusesource.hawtbuf.Buffer> getSenderList() {
         return bean().getSenderList();
      }

      public int getSenderCount() {
         return bean().getSenderCount();
      }

      public org.fusesource.hawtbuf.Buffer getSender(int index) {
         return bean().getSender(index);
      }

      public org.fusesource.hawtbuf.Buffer toUnframedBuffer() {
         if( buffer !=null ) {
            return buffer;
         }
         return org.fusesource.hawtbuf.proto.MessageBufferSupport.toUnframedBuffer(this);
      }

      public org.fusesource.hawtbuf.Buffer toFramedBuffer() {
         return org.fusesource.hawtbuf.proto.MessageBufferSupport.toFramedBuffer(this);
      }

      public byte[] toUnframedByteArray() {
         return toUnframedBuffer().toByteArray();
      }

      public byte[] toFramedByteArray() {
         return toFramedBuffer().toByteArray();
      }

      public void writeFramed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
         output.writeRawVarint32(serializedSizeUnframed());
         writeUnframed(output);
      }

      public void writeFramed(java.io.OutputStream output) throws java.io.IOException {
         org.fusesource.hawtbuf.proto.CodedOutputStream codedOutput = new org.fusesource.hawtbuf.proto.CodedOutputStream(output);
         writeFramed(codedOutput);
         codedOutput.flush();
      }

      public void writeUnframed(java.io.OutputStream output) throws java.io.IOException {
         org.fusesource.hawtbuf.proto.CodedOutputStream codedOutput = new org.fusesource.hawtbuf.proto.CodedOutputStream(output);
         writeUnframed(codedOutput);
         codedOutput.flush();
      }

      public void writeUnframed(org.fusesource.hawtbuf.proto.CodedOutputStream output) throws java.io.IOException {
         if (buffer == null) {
            int size = serializedSizeUnframed();
            buffer = output.getNextBuffer(size);
            org.fusesource.hawtbuf.proto.CodedOutputStream original=null;
            if( buffer == null ) {
               buffer = new org.fusesource.hawtbuf.Buffer(new byte[size]);
               original = output;
               output = new org.fusesource.hawtbuf.proto.CodedOutputStream(buffer);
            }
            output.writeInt64(1, bean.getQueueKey());
            output.writeInt64(2, bean.getQueueSeq());
            output.writeInt64(3, bean.getMessageKey());
            if (bean.hasSize()) {
               output.writeInt32(4, bean.getSize());
            }
            if (bean.hasAttachment()) {
               output.writeBytes(5, bean.getAttachment());
            }
            if (bean.hasRedeliveries()) {
               output.writeInt32(6, bean.getRedeliveries());
            }
            if (bean.hasExpiration()) {
               output.writeSInt64(7, bean.getExpiration());
            }
            if (bean.hasMessageLocator()) {
               output.writeBytes(8, bean.getMessageLocator());
            }
            if (bean.hasSender()) {
               for (org.fusesource.hawtbuf.Buffer i : bean.getSenderList()) {
                  output.writeBytes(9, i);
               }
            }
            if( original !=null ) {
               output.checkNoSpaceLeft();
               output = original;
               output.writeRawBytes(buffer);
            }
         } else {
            output.writeRawBytes(buffer);
         }
      }

      public int serializedSizeFramed() {
         int t = serializedSizeUnframed();
         return org.fusesource.hawtbuf.proto.CodedOutputStream.computeRawVarint32Size(t) + t;
      }

      public int serializedSizeUnframed() {
         if (buffer != null) {
            return buffer.length;
         }
         if (size != -1)
            return size;

         size = 0;
         size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt64Size(1, getQueueKey());
         size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt64Size(2, getQueueSeq());
         size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt64Size(3, getMessageKey());
         if (hasSize()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(4, getSize());
         }
         if (hasAttachment()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeBytesSize(5, getAttachment());
         }
         if (hasRedeliveries()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeInt32Size(6, getRedeliveries());
         }
         if (hasExpiration()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeSInt64Size(7, getExpiration());
         }
         if (hasMessageLocator()) {
            size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeBytesSize(8, getMessageLocator());
         }
         if (hasSender()) {
            for (org.fusesource.hawtbuf.Buffer i : getSenderList()) {
               size += org.fusesource.hawtbuf.proto.CodedOutputStream.computeBytesSize(9, i);
            }
         }
         return size;
      }

      public boolean equals(Object obj) {
         if( obj==this )
            return true;
         
         if( obj==null || obj.getClass()!=Buffer.class )
            return false;
         
         return equals((Buffer)obj);
      }
      
      public boolean equals(Buffer obj) {
         return toUnframedBuffer().equals(obj.toUnframedBuffer());
      }
      
      public int hashCode() {
         if( hashCode==0 ) {
         hashCode=2000715872 ^ toUnframedBuffer().hashCode();
         }
         return hashCode;
      }
      
      public boolean frozen() {
         return true;
      }
   }

}

